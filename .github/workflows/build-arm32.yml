name: Build ARM32 Docker Image

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发
    inputs:
      push_image:
        description: '是否推送镜像到 Docker Hub'
        required: true
        default: 'false'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 git 历史用于版本号

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone Frontend Repository
        run: |
          git clone https://github.com/komari-monitor/komari-web

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './komari-web/package-lock.json'

      - name: Build Frontend
        working-directory: ./komari-web
        run: |
          # 安装依赖和构建
          npm install
          npm run build
          
          # 检查构建结果
          echo "前端构建完成，检查 dist 目录..."
          ls -la dist
          
          # 确保资源文件被正确放置
          echo "将前端资源复制到 Go 项目中..."
          cp -r dist/* ../public/
          
          echo "验证文件复制结果..."
          ls -la ../public/

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install Cross Compilation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-dev-armel-cross

      - name: Build ARM32 Binary
        run: |
          # 验证前端构建结果
          echo "检查前端构建文件..."
          ls -la public/
          
          # 设置编译环境变量
          export CC=arm-linux-gnueabi-gcc
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=arm
          export GOARM=7
          export CGO_CFLAGS="-march=armv7-a"
          export CGO_LDFLAGS="-static"
          
          echo "开始构建 Go 二进制文件..."
          go build -buildvcs=false \
            -tags "sqlite_omit_load_extension" \
            -ldflags="-linkmode external -extldflags '-static'" \
            -v -x \
            -o komari-linux-armv7
          
          echo "构建完成，检查二进制文件..."
          ls -la komari-linux-armv7
          file komari-linux-armv7
          
          # 移除调试信息
          arm-linux-gnueabi-strip komari-linux-armv7

      - name: Log in to Docker Hub
        if: |
          github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && inputs.push_image)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.arm32v7
          platforms: linux/arm/v7
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.push_image) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
